[transmogrifier]
pipeline =
    crawler
    cache
    typeguess
    drop-resources
    template1
    template2
    template3
    template4
    templateauto
    set-folder-default-page
#    titleguess
    relinker
#    encode-all
    topublish
    ploneupload
    ploneupdate
    plonehide
    plonepublish
#    localupload

#
# WebCrawler will emit items like
# item = dict(_site_url = "Original site_url used",
#            _path = "The url crawled without _site_url,
#            _content = "The raw content returned by the url",
#            _content_info = "Headers returned with content"
#            _backlinks    = names,
#            _sortorder    = "An integer representing the order the url was found within the page/site
#	     )
#
# site_url - the top url to crawl
# ignore - list of regex for urls to not crawl
# cache - local directory to read crawled items from instead of accessing the site directly
#

[crawler]
blueprint = transmogrify.webcrawler
site_url  = 
ignore =
	cgi-bin
	javascript:
cache = ${cache:output}

[cache]
blueprint = transmogrify.webcrawler.cache
#target = ploneout
output = funnelwebcache



#
# Typerecognitor adds two more attributes
# _type = 'Page', 'Image', or 'File' depending on the mime_type of from the headers
# _mime_type = the mime_type from the headers
#
[typeguess]
blueprint = transmogrify.webcrawler.typerecognitor



[drop-resources]
blueprint = collective.transmogrifier.sections.condition
condition: python:item.get('_mimetype') not in ['application/x-javascript','text/css','text/plain','application/x-java-byte-code'] and item.get('_path','').split('.')[-1] not in ['class']


#[treeserializer]
#blueprint = transmogrify.pathsorter



[relinker]
blueprint = transmogrify.siteanalyser.relinker
#link_expr = python:item.get('_type',None)=='Image' and item['_path'][:-1].endswith('image') and item['_path']+'_medium' or item.get('_type',None)=='Image' and item['_path']+'/image_web' or item['_path']

#
# Extract title, description and content text from Sphinx generated HTML page
#
# Title is the first <h1> element
#
# Description is reST "admonition" with name Description 
#
# Text is what is left to <body> after removing title and description 
#
# Note that spaces in XPaths must be escaped as &#32;
#
# See
#  http://www.w3schools.com/xpath/default.asp
#  http://blog.browsermob.com/2009/04/test-your-selenium-xpath-easily-with-firebug/
# for XPath info
#
[template1]
blueprint = transmogrify.htmlcontentextractor
title = text //div[@class='body']//h1[1]
# Permalinks are not used in Plone. We have this dummy rule here to parse 
# them out from body so that they do not corrupt "text" field
#delete1 = optional //div[@class='body']//a[@class='headerlink']
#delete2 =  optional //div[contains(@class,'admonition-description')]
#description = text //div[contains(@class,'admonition-description')]//p[@class='last']
#text = html //div[@class='body']

[template2]
blueprint = transmogrify.htmlcontentextractor

[template3]
blueprint = transmogrify.htmlcontentextractor

[template4]
blueprint = transmogrify.htmlcontentextractor


[templateauto]
blueprint = transmogrify.htmlcontentextractor.auto
disable = False


[titleguess]
blueprint = transmogrify.siteanalyser.title
ignore =
	click
	read more
	close
	Close
	http:
	file:
	img


#
# Set the workflow transition key hint which will be used publish the item.
# This value is later read by [publish] and we can have conditions
# to have different WF transitions for different content types 
#
# Note that images do not have workflow and they inherit
# permission settings of the parent container
#
[topublish]
blueprint = collective.transmogrifier.sections.inserter
key = string:_transitions
value = python:["publish"]
condition = python:item.get('_type') != 'Image' and not options.get('disabled')

[encode-all]
blueprint = collective.transmogrifier.sections.codec
keys =
   text
to = utf8



#
# Set index.html as the default page of the folder
#
#  Determines an item is a default page for a container if it has many links
#  to items in that container. 
#
[set-folder-default-page]
blueprint = transmogrify.siteanalyser.defaultpage

#
# Turn items with attachments into folders with a default view
#
[makeattachments]
blueprint = transmogrify.siteanalyser.attach
condition = python: subitem.get('_type') in ['Image']
defaultpage = index-html




#
# Create remote item on Plone site
#
[ploneupload]
blueprint = transmogrify.ploneremote.remoteconstructor
target =
type-key = _type
path-key = _path

#
# Update the remote item with new extracted content from Sphinx documentation
# 
[ploneupdate]
blueprint = transmogrify.ploneremote.remoteschemaupdater
target = ${ploneupload:target}
type-key = _type
path-key = _path

#
# Hide items from the navigation
# (hints to which items should be hidden are set earlier in pipeline)
#
[plonehide]
blueprint = transmogrify.ploneremote.remotenavigationexcluder
target = ${ploneupload:target}
type-key = _type
path-key = _path

#
# Publish the uploaded documentation (if not public yet)
#
[plonepublish]
blueprint = transmogrify.ploneremote.remoteworkflowupdater
transitions = submit publish
transitions-key = _transitions
target = ${ploneupload:target}
type-key = _type
path-key = _path


#
# Save transformed site locally 
#
[localupload]
blueprint = transmogrify.webcrawler.cache
output = 
